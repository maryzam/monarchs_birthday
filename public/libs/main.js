!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=22)}({22:function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r),u=o.right,a=(o.left,u);var s=function(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},l=Array.prototype,c=(l.slice,l.map,Math.sqrt(50)),f=Math.sqrt(10),h=Math.sqrt(2),p=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=g(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function g(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=c?10:o>=f?5:o>=h?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=c?10:o>=f?5:o>=h?2:1)}function v(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=c?i*=10:o>=f?i*=5:o>=h&&(i*=2),n<t?-i:i}Array.prototype.slice;var d={value:function(){}};function y(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new m(r)}function m(t){this._=t}function _(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function w(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function x(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=d,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}m.prototype=y.prototype={constructor:m,on:function(t,n){var e,r=this._,i=_(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=x(r[e],t.name,n);else if(null==n)for(e in r)r[e]=x(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=w(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new m(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var M=y;function b(){}var C=function(t){return null==t?b:function(){return this.querySelector(t)}};function N(){return[]}var T=function(t){return null==t?N:function(){return this.querySelectorAll(t)}},A=function(t){return function(){return this.matches(t)}},k=function(t){return new Array(t.length)};function U(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}U.prototype={constructor:U,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function D(t,n,e,r,i,o){for(var u,a=0,s=n.length,l=o.length;a<l;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new U(t,o[a]);for(;a<s;++a)(u=n[a])&&(i[a]=u)}function L(t,n,e,r,i,o,u){var a,s,l,c={},f=n.length,h=o.length,p=new Array(f);for(a=0;a<f;++a)(s=n[a])&&(p[a]=l="$"+u.call(s,s.__data__,a,n),l in c?i[a]=s:c[l]=s);for(a=0;a<h;++a)(s=c[l="$"+u.call(t,o[a],a,o)])?(r[a]=s,s.__data__=o[a],c[l]=null):e[a]=new U(t,o[a]);for(a=0;a<f;++a)(s=n[a])&&c[p[a]]===s&&(i[a]=s)}function S(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var R="http://www.w3.org/1999/xhtml",E={svg:"http://www.w3.org/2000/svg",xhtml:R,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},P=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),E.hasOwnProperty(n)?{space:E[n],local:t}:t};function Y(t){return function(){this.removeAttribute(t)}}function F(t){return function(){this.removeAttributeNS(t.space,t.local)}}function j(t,n){return function(){this.setAttribute(t,n)}}function H(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function q(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function O(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var z=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function $(t){return function(){this.style.removeProperty(t)}}function X(t,n,e){return function(){this.style.setProperty(t,n,e)}}function B(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function V(t,n){return t.style.getPropertyValue(n)||z(t).getComputedStyle(t,null).getPropertyValue(n)}function I(t){return function(){delete this[t]}}function Z(t,n){return function(){this[t]=n}}function W(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Q(t){return t.trim().split(/^|\s+/)}function J(t){return t.classList||new G(t)}function G(t){this._node=t,this._names=Q(t.getAttribute("class")||"")}function K(t,n){for(var e=J(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function tt(t,n){for(var e=J(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function nt(t){return function(){K(this,t)}}function et(t){return function(){tt(this,t)}}function rt(t,n){return function(){(n.apply(this,arguments)?K:tt)(this,t)}}G.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function it(){this.textContent=""}function ot(t){return function(){this.textContent=t}}function ut(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function at(){this.innerHTML=""}function st(t){return function(){this.innerHTML=t}}function lt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function ct(){this.nextSibling&&this.parentNode.appendChild(this)}function ft(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ht(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===R&&n.documentElement.namespaceURI===R?n.createElement(t):n.createElementNS(e,t)}}function pt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var gt=function(t){var n=P(t);return(n.local?pt:ht)(n)};function vt(){return null}function dt(){var t=this.parentNode;t&&t.removeChild(this)}function yt(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function mt(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var _t={},wt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(_t={mouseenter:"mouseover",mouseleave:"mouseout"}));function xt(t,n,e){return t=Mt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Mt(t,n,e){return function(r){var i=wt;wt=r;try{t.call(this,this.__data__,n,e)}finally{wt=i}}}function bt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Ct(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Nt(t,n,e){var r=_t.hasOwnProperty(t.type)?xt:Mt;return function(i,o,u){var a,s=this.__on,l=r(n,o,u);if(s)for(var c=0,f=s.length;c<f;++c)if((a=s[c]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=l,a.capture=e),void(a.value=n);this.addEventListener(t.type,l,e),a={type:t.type,name:t.name,value:n,listener:l,capture:e},s?s.push(a):this.__on=[a]}}function Tt(t,n,e){var r=z(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function At(t,n){return function(){return Tt(this,t,n)}}function kt(t,n){return function(){return Tt(this,t,n.apply(this,arguments))}}var Ut=[null];function Dt(t,n){this._groups=t,this._parents=n}function Lt(){return new Dt([[document.documentElement]],Ut)}Dt.prototype=Lt.prototype={constructor:Dt,select:function(t){"function"!=typeof t&&(t=C(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],s=a.length,l=r[i]=new Array(s),c=0;c<s;++c)(o=a[c])&&(u=t.call(o,o.__data__,c,a))&&("__data__"in o&&(u.__data__=o.__data__),l[c]=u);return new Dt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=T(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],s=a.length,l=0;l<s;++l)(u=a[l])&&(r.push(t.call(u,u.__data__,l,a)),i.push(u));return new Dt(r,i)},filter:function(t){"function"!=typeof t&&(t=A(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,s=r[i]=[],l=0;l<a;++l)(o=u[l])&&t.call(o,o.__data__,l,u)&&s.push(o);return new Dt(r,this._parents)},data:function(t,n){if(!t)return g=new Array(this.size()),c=-1,this.each((function(t){g[++c]=t})),g;var e,r=n?L:D,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),s=new Array(u),l=new Array(u),c=0;c<u;++c){var f=i[c],h=o[c],p=h.length,g=t.call(f,f&&f.__data__,c,i),v=g.length,d=s[c]=new Array(v),y=a[c]=new Array(v);r(f,h,d,y,l[c]=new Array(p),g,n);for(var m,_,w=0,x=0;w<v;++w)if(m=d[w]){for(w>=x&&(x=w+1);!(_=y[x])&&++x<v;);m._next=_||null}}return(a=new Dt(a,i))._enter=s,a._exit=l,a},enter:function(){return new Dt(this._enter||this._groups.map(k),this._parents)},exit:function(){return new Dt(this._exit||this._groups.map(k),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,l=n[a],c=e[a],f=l.length,h=u[a]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;a<r;++a)u[a]=n[a];return new Dt(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=S);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],s=a.length,l=i[o]=new Array(s),c=0;c<s;++c)(u=a[c])&&(l[c]=u);l.sort(n)}return new Dt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=P(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?F:Y:"function"==typeof n?e.local?O:q:e.local?H:j)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?$:"function"==typeof n?B:X)(t,n,null==e?"":e)):V(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?I:"function"==typeof n?W:Z)(t,n)):this.node()[t]},classed:function(t,n){var e=Q(t+"");if(arguments.length<2){for(var r=J(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?rt:n?nt:et)(e,n))},text:function(t){return arguments.length?this.each(null==t?it:("function"==typeof t?ut:ot)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?at:("function"==typeof t?lt:st)(t)):this.node().innerHTML},raise:function(){return this.each(ct)},lower:function(){return this.each(ft)},append:function(t){var n="function"==typeof t?t:gt(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:gt(t),r=null==n?vt:"function"==typeof n?n:C(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(dt)},clone:function(t){return this.select(t?mt:yt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=bt(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?Nt:Ct,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var s,l=0,c=a.length;l<c;++l)for(r=0,s=a[l];r<u;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?kt:At)(t,n))}};var St=Lt,Rt=function(t){return"string"==typeof t?new Dt([[document.querySelector(t)]],[document.documentElement]):new Dt([[t]],Ut)};var Et=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Pt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Yt(){}var Ft="\\s*([+-]?\\d+)\\s*",jt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ht="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",qt=/^#([0-9a-f]{3,8})$/,Ot=new RegExp("^rgb\\("+[Ft,Ft,Ft]+"\\)$"),zt=new RegExp("^rgb\\("+[Ht,Ht,Ht]+"\\)$"),$t=new RegExp("^rgba\\("+[Ft,Ft,Ft,jt]+"\\)$"),Xt=new RegExp("^rgba\\("+[Ht,Ht,Ht,jt]+"\\)$"),Bt=new RegExp("^hsl\\("+[jt,Ht,Ht]+"\\)$"),Vt=new RegExp("^hsla\\("+[jt,Ht,Ht,jt]+"\\)$"),It={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Zt(){return this.rgb().formatHex()}function Wt(){return this.rgb().formatRgb()}function Qt(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=qt.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Jt(n):3===e?new nn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Gt(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Gt(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Ot.exec(t))?new nn(n[1],n[2],n[3],1):(n=zt.exec(t))?new nn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=$t.exec(t))?Gt(n[1],n[2],n[3],n[4]):(n=Xt.exec(t))?Gt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Bt.exec(t))?un(n[1],n[2]/100,n[3]/100,1):(n=Vt.exec(t))?un(n[1],n[2]/100,n[3]/100,n[4]):It.hasOwnProperty(t)?Jt(It[t]):"transparent"===t?new nn(NaN,NaN,NaN,0):null}function Jt(t){return new nn(t>>16&255,t>>8&255,255&t,1)}function Gt(t,n,e,r){return r<=0&&(t=n=e=NaN),new nn(t,n,e,r)}function Kt(t){return t instanceof Yt||(t=Qt(t)),t?new nn((t=t.rgb()).r,t.g,t.b,t.opacity):new nn}function tn(t,n,e,r){return 1===arguments.length?Kt(t):new nn(t,n,e,null==r?1:r)}function nn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function en(){return"#"+on(this.r)+on(this.g)+on(this.b)}function rn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function on(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function un(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new sn(t,n,e,r)}function an(t){if(t instanceof sn)return new sn(t.h,t.s,t.l,t.opacity);if(t instanceof Yt||(t=Qt(t)),!t)return new sn;if(t instanceof sn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,s=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=s<.5?o+i:2-o-i,u*=60):a=s>0&&s<1?0:u,new sn(u,a,s,t.opacity)}function sn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ln(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function cn(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}Et(Yt,Qt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Zt,formatHex:Zt,formatHsl:function(){return an(this).formatHsl()},formatRgb:Wt,toString:Wt}),Et(nn,tn,Pt(Yt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new nn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new nn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:en,formatHex:en,formatRgb:rn,toString:rn})),Et(sn,(function(t,n,e,r){return 1===arguments.length?an(t):new sn(t,n,e,null==r?1:r)}),Pt(Yt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new sn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new sn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new nn(ln(t>=240?t-240:t+120,i,r),ln(t,i,r),ln(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var fn=function(t){return function(){return t}};function hn(t,n){return function(e){return t+e*n}}function pn(t){return 1==(t=+t)?gn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):fn(isNaN(n)?e:n)}}function gn(t,n){var e=n-t;return e?hn(t,e):fn(isNaN(t)?n:t)}var vn=function t(n){var e=pn(n);function r(t,n){var r=e((t=tn(t)).r,(n=tn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=gn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function dn(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=tn(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}dn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return cn((e-r/n)*n,u,i,o,a)}})),dn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return cn((e-r/n)*n,i,o,u,a)}}));var yn=function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}};function mn(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function _n(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=kn(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}var wn=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},xn=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},Mn=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=kn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},bn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Cn=new RegExp(bn.source,"g");var Nn,Tn,An=function(t,n){var e,r,i,o=bn.lastIndex=Cn.lastIndex=0,u=-1,a=[],s=[];for(t+="",n+="";(e=bn.exec(t))&&(r=Cn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,s.push({i:u,x:xn(e,r)})),o=Cn.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)a[(e=s[r]).i]=e.x(t);return a.join("")})},kn=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?fn(n):("number"===r?xn:"string"===r?(e=Qt(n))?(n=e,vn):An:n instanceof Qt?vn:n instanceof Date?wn:mn(n)?yn:Array.isArray(n)?_n:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Mn:xn)(t,n)},Un=0,Dn=0,Ln=0,Sn=0,Rn=0,En=0,Pn="object"==typeof performance&&performance.now?performance:Date,Yn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Fn(){return Rn||(Yn(jn),Rn=Pn.now()+En)}function jn(){Rn=0}function Hn(){this._call=this._time=this._next=null}function qn(t,n,e){var r=new Hn;return r.restart(t,n,e),r}function On(){Rn=(Sn=Pn.now())+En,Un=Dn=0;try{!function(){Fn(),++Un;for(var t,n=Nn;n;)(t=Rn-n._time)>=0&&n._call.call(null,t),n=n._next;--Un}()}finally{Un=0,function(){var t,n,e=Nn,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Nn=n);Tn=t,$n(r)}(),Rn=0}}function zn(){var t=Pn.now(),n=t-Sn;n>1e3&&(En-=n,Sn=t)}function $n(t){Un||(Dn&&(Dn=clearTimeout(Dn)),t-Rn>24?(t<1/0&&(Dn=setTimeout(On,t-Pn.now()-En)),Ln&&(Ln=clearInterval(Ln))):(Ln||(Sn=Pn.now(),Ln=setInterval(zn,1e3)),Un=1,Yn(On)))}Hn.prototype=qn.prototype={constructor:Hn,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Fn():+e)+(null==n?0:+n),this._next||Tn===this||(Tn?Tn._next=this:Nn=this,Tn=this),this._call=t,this._time=e,$n()},stop:function(){this._call&&(this._call=null,this._time=1/0,$n())}};var Xn=function(t,n,e){var r=new Hn;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},Bn=M("start","end","cancel","interrupt"),Vn=[],In=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var l,c,f,h;if(1!==e.state)return a();for(l in i)if((h=i[l]).name===e.name){if(3===h.state)return Xn(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[l]):+l<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[l])}if(Xn((function(){3===e.state&&(e.state=4,e.timer.restart(u,e.delay,e.time),u(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),l=0,c=-1;l<f;++l)(h=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=h);r.length=c+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=qn((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Bn,tween:Vn,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function Zn(t,n){var e=Qn(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Wn(t,n){var e=Qn(t,n);if(e.state>3)throw new Error("too late; already running");return e}function Qn(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Jn,Gn,Kn,te,ne=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}},ee=180/Math.PI,re={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},ie=function(t,n,e,r,i,o){var u,a,s;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,s/=a),t*r<n*e&&(t=-t,n=-n,s=-s,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*ee,skewX:Math.atan(s)*ee,scaleX:u,scaleY:a}};function oe(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],s=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var s=u.push("translate(",null,n,null,e);a.push({i:s-4,x:xn(t,i)},{i:s-2,x:xn(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:xn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:xn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,s),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:xn(t,e)},{i:a-2,x:xn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,s),o=u=null,function(t){for(var n,e=-1,r=s.length;++e<r;)a[(n=s[e]).i]=n.x(t);return a.join("")}}}var ue=oe((function(t){return"none"===t?re:(Jn||(Jn=document.createElement("DIV"),Gn=document.documentElement,Kn=document.defaultView),Jn.style.transform=t,t=Kn.getComputedStyle(Gn.appendChild(Jn),null).getPropertyValue("transform"),Gn.removeChild(Jn),t=t.slice(7,-1).split(","),ie(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),ae=oe((function(t){return null==t?re:(te||(te=document.createElementNS("http://www.w3.org/2000/svg","g")),te.setAttribute("transform",t),(t=te.transform.baseVal.consolidate())?(t=t.matrix,ie(t.a,t.b,t.c,t.d,t.e,t.f)):re)}),", ",")",")");function se(t,n){var e,r;return function(){var i=Wn(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function le(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Wn(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=a;break}s===l&&i.push(a)}o.tween=i}}function ce(t,n,e){var r=t._id;return t.each((function(){var t=Wn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Qn(t,r).value[n]}}var fe=function(t,n){var e;return("number"==typeof n?xn:n instanceof Qt?vn:(e=Qt(n))?(n=e,vn):An)(t,n)};function he(t){return function(){this.removeAttribute(t)}}function pe(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ge(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}}function ve(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}function de(t,n,e){var r,i,o;return function(){var u,a,s=e(this);if(null!=s)return(u=this.getAttribute(t))===(a=s+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,s));this.removeAttribute(t)}}function ye(t,n,e){var r,i,o;return function(){var u,a,s=e(this);if(null!=s)return(u=this.getAttributeNS(t.space,t.local))===(a=s+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,s));this.removeAttributeNS(t.space,t.local)}}function me(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function _e(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function we(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&_e(t,i)),e}return i._value=n,i}function xe(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&me(t,i)),e}return i._value=n,i}function Me(t,n){return function(){Zn(this,t).delay=+n.apply(this,arguments)}}function be(t,n){return n=+n,function(){Zn(this,t).delay=n}}function Ce(t,n){return function(){Wn(this,t).duration=+n.apply(this,arguments)}}function Ne(t,n){return n=+n,function(){Wn(this,t).duration=n}}function Te(t,n){if("function"!=typeof n)throw new Error;return function(){Wn(this,t).ease=n}}function Ae(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Zn:Wn;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var ke=St.prototype.constructor;function Ue(t){return function(){this.style.removeProperty(t)}}function De(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Le(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&De(t,o,e)),r}return o._value=n,o}function Se(t){return function(n){this.textContent=t.call(this,n)}}function Re(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Se(r)),n}return r._value=t,r}var Ee=0;function Pe(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ye(){return++Ee}var Fe=St.prototype;Pe.prototype=function(t){return St().transition(t)}.prototype={constructor:Pe,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=C(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,s,l=r[u],c=l.length,f=o[u]=new Array(c),h=0;h<c;++h)(a=l[h])&&(s=t.call(a,a.__data__,h,l))&&("__data__"in a&&(s.__data__=a.__data__),f[h]=s,In(f[h],n,e,h,f,Qn(a,e)));return new Pe(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=T(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var s,l=r[a],c=l.length,f=0;f<c;++f)if(s=l[f]){for(var h,p=t.call(s,s.__data__,f,l),g=Qn(s,e),v=0,d=p.length;v<d;++v)(h=p[v])&&In(h,n,e,v,p,g);o.push(p),u.push(s)}return new Pe(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=A(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,s=r[i]=[],l=0;l<a;++l)(o=u[l])&&t.call(o,o.__data__,l,u)&&s.push(o);return new Pe(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,l=n[a],c=e[a],f=l.length,h=u[a]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;a<r;++a)u[a]=n[a];return new Pe(u,this._parents,this._name,this._id)},selection:function(){return new ke(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Ye(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,l=0;l<s;++l)if(u=a[l]){var c=Qn(u,n);In(u,t,e,l,a,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Pe(r,this._parents,t,e)},call:Fe.call,nodes:Fe.nodes,node:Fe.node,size:Fe.size,empty:Fe.empty,each:Fe.each,on:function(t,n){var e=this._id;return arguments.length<2?Qn(this.node(),e).on.on(t):this.each(Ae(e,t,n))},attr:function(t,n){var e=P(t),r="transform"===e?ae:fe;return this.attrTween(t,"function"==typeof n?(e.local?ye:de)(e,r,ce(this,"attr."+t,n)):null==n?(e.local?pe:he)(e):(e.local?ve:ge)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=P(t);return this.tween(e,(r.local?we:xe)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?ue:fe;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=V(this,t),u=(this.style.removeProperty(t),V(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,Ue(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=V(this,t),a=e(this),s=a+"";return null==a&&(this.style.removeProperty(t),s=a=V(this,t)),u===s?null:u===r&&s===i?o:(i=s,o=n(r=u,a))}}(t,r,ce(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var s=Wn(this,t),l=s.on,c=null==s.value[u]?o||(o=Ue(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(a,i=c),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=V(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Le(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(ce(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Re(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Qn(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?se:le)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Me:be)(n,t)):Qn(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ce:Ne)(n,t)):Qn(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Te(n,t)):Qn(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,u){var a={value:u},s={value:function(){0==--i&&o()}};e.each((function(){var e=Wn(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(s)),e.on=n}))}))}};var je={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function He(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return je.time=Fn(),je;return e}St.prototype.interrupt=function(t){return this.each((function(){ne(this,t)}))},St.prototype.transition=function(t){var n,e;t instanceof Pe?(n=t._id,t=t._name):(n=Ye(),(e=je).time=Fn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,l=0;l<s;++l)(u=a[l])&&In(u,t,n,l,a,e||He(u,n));return new Pe(r,this._parents,t,n)};function qe(t){return[+t[0],+t[1]]}function Oe(t){return[qe(t[0]),qe(t[1])]}["w","e"].map(ze),["n","s"].map(ze),["n","w","e","s","nw","ne","sw","se"].map(ze);function ze(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var $e=Math.PI,Xe=2*$e,Be=Xe-1e-6;function Ve(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ie(){return new Ve}Ve.prototype=Ie.prototype={constructor:Ve,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,s=r-n,l=o-t,c=u-n,f=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>1e-6)if(Math.abs(c*a-s*l)>1e-6&&i){var h=e-o,p=r-u,g=a*a+s*s,v=h*h+p*p,d=Math.sqrt(g),y=Math.sqrt(f),m=i*Math.tan(($e-Math.acos((g+f-v)/(2*d*y)))/2),_=m/y,w=m/d;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*l)+","+(n+_*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>l*p)+","+(this._x1=t+w*a)+","+(this._y1=n+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),s=t+u,l=n+a,c=1^o,f=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+s+","+l),e&&(f<0&&(f=f%Xe+Xe),f>Be?this._+="A"+e+","+e+",0,1,"+c+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+c+","+(this._x1=s)+","+(this._y1=l):f>1e-6&&(this._+="A"+e+","+e+",0,"+ +(f>=$e)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};function Ze(){}function We(t,n){var e=new Ze;if(t instanceof Ze)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}Ze.prototype=We.prototype={constructor:Ze,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Qe=We;function Je(){}var Ge=Qe.prototype;function Ke(t,n){var e=new Je;if(t instanceof Je)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Je.prototype=Ke.prototype={constructor:Je,has:Ge.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Ge.remove,clear:Ge.clear,values:Ge.keys,size:Ge.size,empty:Ge.empty,each:Ge.each};Array.prototype.slice;var tr={},nr={};function er(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function rr(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function ir(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function or(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+ir(-n,6):n>9999?"+"+ir(n,6):ir(n,4))+"-"+ir(t.getUTCMonth()+1,2)+"-"+ir(t.getUTCDate(),2)+(o?"T"+ir(e,2)+":"+ir(r,2)+":"+ir(i,2)+"."+ir(o,3)+"Z":i?"T"+ir(e,2)+":"+ir(r,2)+":"+ir(i,2)+"Z":r||e?"T"+ir(e,2)+":"+ir(r,2)+"Z":"")}var ur=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,s=o<=0,l=!1;function c(){if(s)return nr;if(l)return l=!1,tr;var n,r,i=u;if(34===t.charCodeAt(i)){for(;u++<o&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=o?s=!0:10===(r=t.charCodeAt(u++))?l=!0:13===r&&(l=!0,10===t.charCodeAt(u)&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if(10===(r=t.charCodeAt(n=u++)))l=!0;else if(13===r)l=!0,10===t.charCodeAt(u)&&++u;else if(r!==e)continue;return t.slice(i,n)}return s=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=c())!==nr;){for(var f=[];r!==tr&&r!==nr;)f.push(r),r=c();n&&null==(f=n(f,a++))||i.push(f)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return u(n[t])})).join(t)}))}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?or(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=er(t);return function(r,i){return n(e(r),i,t)}}(t,n):er(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=rr(n)),[e.map(u).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=rr(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:u}},ar=ur(","),sr=ar.parse,lr=(ar.parseRows,ar.format,ar.formatBody,ar.formatRows,ar.formatRow,ar.formatValue,ur("\t")),cr=lr.parse;lr.parseRows,lr.format,lr.formatBody,lr.formatRows,lr.formatRow,lr.formatValue;function fr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var hr=function(t,n){return fetch(t,n).then(fr)};function pr(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),hr(n,e).then((function(n){return t(n,r)}))}}var gr=pr(sr);pr(cr);function vr(t){return function(n,e){return hr(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}vr("application/xml"),vr("text/html"),vr("image/svg+xml");function dr(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,s,l,c,f,h,p=t._root,g={data:r},v=t._x0,d=t._y0,y=t._x1,m=t._y1;if(!p)return t._root=g,t;for(;p.length;)if((l=n>=(o=(v+y)/2))?v=o:y=o,(c=e>=(u=(d+m)/2))?d=u:m=u,i=p,!(p=p[f=c<<1|l]))return i[f]=g,t;if(a=+t._x.call(null,p.data),s=+t._y.call(null,p.data),n===a&&e===s)return g.next=p,i?i[f]=g:t._root=g,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(l=n>=(o=(v+y)/2))?v=o:y=o,(c=e>=(u=(d+m)/2))?d=u:m=u}while((f=c<<1|l)==(h=(s>=u)<<1|a>=o));return i[h]=p,i[f]=g,t}var yr=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function mr(t){return t[0]}function _r(t){return t[1]}function wr(t,n,e){var r=new xr(null==n?mr:n,null==e?_r:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function xr(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Mr(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var br=wr.prototype=xr.prototype;br.copy=function(){var t,n,e=new xr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Mr(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Mr(n));return e},br.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return dr(this.cover(n,e),n,e,t)},br.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),s=1/0,l=1/0,c=-1/0,f=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<s&&(s=r),r>c&&(c=r),i<l&&(l=i),i>f&&(f=i));if(s>c||l>f)return this;for(this.cover(s,l).cover(c,f),e=0;e<o;++e)dr(this,u[e],a[e],t[e]);return this},br.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var u,a,s=i-e,l=this._root;e>t||t>=i||r>n||n>=o;)switch(a=(n<r)<<1|t<e,(u=new Array(4))[a]=l,l=u,s*=2,a){case 0:i=e+s,o=r+s;break;case 1:e=i-s,o=r+s;break;case 2:i=e+s,r=o-s;break;case 3:e=i-s,r=o-s}this._root&&this._root.length&&(this._root=l)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},br.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},br.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},br.find=function(t,n,e){var r,i,o,u,a,s,l,c=this._x0,f=this._y0,h=this._x1,p=this._y1,g=[],v=this._root;for(v&&g.push(new yr(v,c,f,h,p)),null==e?e=1/0:(c=t-e,f=n-e,h=t+e,p=n+e,e*=e);s=g.pop();)if(!(!(v=s.node)||(i=s.x0)>h||(o=s.y0)>p||(u=s.x1)<c||(a=s.y1)<f))if(v.length){var d=(i+u)/2,y=(o+a)/2;g.push(new yr(v[3],d,y,u,a),new yr(v[2],i,y,d,a),new yr(v[1],d,o,u,y),new yr(v[0],i,o,d,y)),(l=(n>=y)<<1|t>=d)&&(s=g[g.length-1],g[g.length-1]=g[g.length-1-l],g[g.length-1-l]=s)}else{var m=t-+this._x.call(null,v.data),_=n-+this._y.call(null,v.data),w=m*m+_*_;if(w<e){var x=Math.sqrt(e=w);c=t-x,f=n-x,h=t+x,p=n+x,r=v.data}}return r},br.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,s,l,c,f,h,p=this._root,g=this._x0,v=this._y0,d=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((l=o>=(a=(g+d)/2))?g=a:d=a,(c=u>=(s=(v+y)/2))?v=s:y=s,n=p,!(p=p[f=c<<1|l]))return this;if(!p.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},br.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},br.root=function(){return this._root},br.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},br.visit=function(t){var n,e,r,i,o,u,a=[],s=this._root;for(s&&a.push(new yr(s,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&s.length){var l=(r+o)/2,c=(i+u)/2;(e=s[3])&&a.push(new yr(e,l,c,o,u)),(e=s[2])&&a.push(new yr(e,r,c,l,u)),(e=s[1])&&a.push(new yr(e,l,i,o,c)),(e=s[0])&&a.push(new yr(e,r,i,l,c))}return this},br.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new yr(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,s=n.x1,l=n.y1,c=(u+s)/2,f=(a+l)/2;(o=i[0])&&e.push(new yr(o,u,a,c,f)),(o=i[1])&&e.push(new yr(o,c,a,s,f)),(o=i[2])&&e.push(new yr(o,u,f,c,l)),(o=i[3])&&e.push(new yr(o,c,f,s,l))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},br.x=function(t){return arguments.length?(this._x=t,this):this._x},br.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Cr=function(){return Math.random()},Nr=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Cr),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Cr)),Tr=(function t(n){function e(){var t=Nr.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Cr),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Cr));(function t(n){function e(t){var e=Tr.source(n)(t);return function(){return e()/t}}return e.source=t,e})(Cr),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Cr);function Ar(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var kr=Array.prototype,Ur=kr.map,Dr=kr.slice;var Lr=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}},Sr=function(t){return+t},Rr=[0,1];function Er(t){return t}function Pr(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function Yr(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Fr(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=Pr(i,r),o=e(u,o)):(r=Pr(r,i),o=e(o,u)),function(t){return o(r(t))}}function jr(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=Pr(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=a(t,n,1,r)-1;return o[e](i[e](n))}}function Hr(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function qr(){var t,n,e,r,i,o,u=Rr,a=Rr,s=kn,l=Er;function c(){return r=Math.min(u.length,a.length)>2?jr:Fr,i=o=null,f}function f(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,s)))(t(l(n)))}return f.invert=function(e){return l(n((o||(o=r(a,u.map(t),xn)))(e)))},f.domain=function(t){return arguments.length?(u=Ur.call(t,Sr),l===Er||(l=Yr(u)),c()):u.slice()},f.range=function(t){return arguments.length?(a=Dr.call(t),c()):a.slice()},f.rangeRound=function(t){return a=Dr.call(t),s=Lr,c()},f.clamp=function(t){return arguments.length?(l=t?Yr(u):Er,f):l!==Er},f.interpolate=function(t){return arguments.length?(s=t,c()):s},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,c()}}function Or(t,n){return qr()(t,n)}var zr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function $r(t){if(!(n=zr.exec(t)))throw new Error("invalid format: "+t);var n;return new Xr({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Xr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}$r.prototype=Xr.prototype,Xr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Br,Vr,Ir,Zr,Wr=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Qr=function(t){return(t=Wr(Math.abs(t)))?t[1]:NaN},Jr=function(t,n){var e=Wr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Gr={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Jr(100*t,n)},r:Jr,s:function(t,n){var e=Wr(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Br=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Wr(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Kr=function(t){return t},ti=Array.prototype.map,ni=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Vr=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?Kr:(n=ti.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],u=0,a=n[0],s=0;i>0&&a>0&&(s+a+1>r&&(a=Math.max(1,r-s)),o.push(t.substring(i-=a,i+a)),!((s+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",u=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?Kr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(ti.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=$r(t)).fill,e=t.align,f=t.sign,h=t.symbol,p=t.zero,g=t.width,v=t.comma,d=t.precision,y=t.trim,m=t.type;"n"===m?(v=!0,m="g"):Gr[m]||(void 0===d&&(d=12),y=!0,m="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===h?o:/[%p]/.test(m)?s:"",x=Gr[m],M=/[defgprs%]/.test(m);function b(t){var i,o,s,h=_,b=w;if("c"===m)b=x(t)+b,t="";else{var C=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),d),y&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),C&&0==+t&&"+"!==f&&(C=!1),h=(C?"("===f?f:l:"-"===f||"("===f?"":f)+h,b=("s"===m?ni[8+Br/3]:"")+b+(C&&"("===f?")":""),M)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){b=(46===s?u+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}v&&!p&&(t=r(t,1/0));var N=h.length+t.length+b.length,T=N<g?new Array(g-N+1).join(n):"";switch(v&&p&&(t=r(T+t,T.length?g-b.length:1/0),T=""),e){case"<":t=h+t+b+T;break;case"=":t=h+T+t+b;break;case"^":t=T.slice(0,N=T.length>>1)+h+t+b+T.slice(N);break;default:t=T+h+t+b}return a(t)}return d=void 0===d?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),b.toString=function(){return t+""},b}return{format:f,formatPrefix:function(t,n){var e=f(((t=$r(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Qr(n)/3))),i=Math.pow(10,-r),o=ni[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Ir=Vr.format,Zr=Vr.formatPrefix;var ei=function(t,n,e,r){var i,o=v(t,n,e);switch((r=$r(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Qr(n)/3)))-Qr(Math.abs(t)))}(o,u))||(r.precision=i),Zr(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Qr(n)-Qr(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Qr(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Ir(r)};function ri(t){var n=t.domain;return t.ticks=function(t){var e=n();return p(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return ei(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],s=i[u];return s<a&&(r=a,a=s,s=r,r=o,o=u,u=r),(r=g(a,s,e))>0?r=g(a=Math.floor(a/r)*r,s=Math.ceil(s/r)*r,e):r<0&&(r=g(a=Math.ceil(a*r)/r,s=Math.floor(s*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(s/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(s*r)/r,n(i)),t},t}function ii(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function oi(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function ui(t){return t<0?-t*t:t*t}function ai(t){var n=t(Er,Er),e=1;function r(){return 1===e?t(Er,Er):.5===e?t(oi,ui):t(ii(e),ii(1/e))}return n.exponent=function(t){return arguments.length?(e=+t,r()):e},ri(n)}function si(){var t=ai(qr());return t.copy=function(){return Hr(t,si()).exponent(t.exponent())},Ar.apply(t,arguments),t}var li=new Date,ci=new Date;function fi(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return fi((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return li.setTime(+n),ci.setTime(+r),t(li),t(ci),Math.floor(e(li,ci))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var hi=fi((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));hi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?fi((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var pi=hi,gi=(hi.range,fi((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));gi.range;function vi(t){return fi((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var di=vi(0),yi=vi(1),mi=vi(2),_i=vi(3),wi=vi(4),xi=vi(5),Mi=vi(6),bi=(di.range,yi.range,mi.range,_i.range,wi.range,xi.range,Mi.range,fi((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),Ci=bi,Ni=(bi.range,fi((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),Ti=(Ni.range,fi((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()}))),Ai=(Ti.range,fi((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),ki=(Ai.range,fi((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));ki.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?fi((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):ki:null};ki.range;function Ui(t){return fi((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var Di=Ui(0),Li=Ui(1),Si=Ui(2),Ri=Ui(3),Ei=Ui(4),Pi=Ui(5),Yi=Ui(6),Fi=(Di.range,Li.range,Si.range,Ri.range,Ei.range,Pi.range,Yi.range,fi((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),ji=Fi,Hi=(Fi.range,fi((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Hi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?fi((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var qi=Hi;Hi.range;function Oi(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function zi(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function $i(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var Xi,Bi,Vi,Ii={"-":"",_:" ",0:"0"},Zi=/^\s*\d+/,Wi=/^%/,Qi=/[\\^$*+?|[\]().{}]/g;function Ji(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Gi(t){return t.replace(Qi,"\\$&")}function Ki(t){return new RegExp("^(?:"+t.map(Gi).join("|")+")","i")}function to(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function no(t,n,e){var r=Zi.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function eo(t,n,e){var r=Zi.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function ro(t,n,e){var r=Zi.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function io(t,n,e){var r=Zi.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function oo(t,n,e){var r=Zi.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function uo(t,n,e){var r=Zi.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function ao(t,n,e){var r=Zi.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function so(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function lo(t,n,e){var r=Zi.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function co(t,n,e){var r=Zi.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function fo(t,n,e){var r=Zi.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function ho(t,n,e){var r=Zi.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function po(t,n,e){var r=Zi.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function go(t,n,e){var r=Zi.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function vo(t,n,e){var r=Zi.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function yo(t,n,e){var r=Zi.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function mo(t,n,e){var r=Zi.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function _o(t,n,e){var r=Wi.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function wo(t,n,e){var r=Zi.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function xo(t,n,e){var r=Zi.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Mo(t,n){return Ji(t.getDate(),n,2)}function bo(t,n){return Ji(t.getHours(),n,2)}function Co(t,n){return Ji(t.getHours()%12||12,n,2)}function No(t,n){return Ji(1+Ci.count(pi(t),t),n,3)}function To(t,n){return Ji(t.getMilliseconds(),n,3)}function Ao(t,n){return To(t,n)+"000"}function ko(t,n){return Ji(t.getMonth()+1,n,2)}function Uo(t,n){return Ji(t.getMinutes(),n,2)}function Do(t,n){return Ji(t.getSeconds(),n,2)}function Lo(t){var n=t.getDay();return 0===n?7:n}function So(t,n){return Ji(di.count(pi(t)-1,t),n,2)}function Ro(t,n){var e=t.getDay();return t=e>=4||0===e?wi(t):wi.ceil(t),Ji(wi.count(pi(t),t)+(4===pi(t).getDay()),n,2)}function Eo(t){return t.getDay()}function Po(t,n){return Ji(yi.count(pi(t)-1,t),n,2)}function Yo(t,n){return Ji(t.getFullYear()%100,n,2)}function Fo(t,n){return Ji(t.getFullYear()%1e4,n,4)}function jo(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Ji(n/60|0,"0",2)+Ji(n%60,"0",2)}function Ho(t,n){return Ji(t.getUTCDate(),n,2)}function qo(t,n){return Ji(t.getUTCHours(),n,2)}function Oo(t,n){return Ji(t.getUTCHours()%12||12,n,2)}function zo(t,n){return Ji(1+ji.count(qi(t),t),n,3)}function $o(t,n){return Ji(t.getUTCMilliseconds(),n,3)}function Xo(t,n){return $o(t,n)+"000"}function Bo(t,n){return Ji(t.getUTCMonth()+1,n,2)}function Vo(t,n){return Ji(t.getUTCMinutes(),n,2)}function Io(t,n){return Ji(t.getUTCSeconds(),n,2)}function Zo(t){var n=t.getUTCDay();return 0===n?7:n}function Wo(t,n){return Ji(Di.count(qi(t)-1,t),n,2)}function Qo(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Ei(t):Ei.ceil(t),Ji(Ei.count(qi(t),t)+(4===qi(t).getUTCDay()),n,2)}function Jo(t){return t.getUTCDay()}function Go(t,n){return Ji(Li.count(qi(t)-1,t),n,2)}function Ko(t,n){return Ji(t.getUTCFullYear()%100,n,2)}function tu(t,n){return Ji(t.getUTCFullYear()%1e4,n,4)}function nu(){return"+0000"}function eu(){return"%"}function ru(t){return+t}function iu(t){return Math.floor(+t/1e3)}!function(t){Xi=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,s=t.shortMonths,l=Ki(i),c=to(i),f=Ki(o),h=to(o),p=Ki(u),g=to(u),v=Ki(a),d=to(a),y=Ki(s),m=to(s),_={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Mo,e:Mo,f:Ao,H:bo,I:Co,j:No,L:To,m:ko,M:Uo,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:ru,s:iu,S:Do,u:Lo,U:So,V:Ro,w:Eo,W:Po,x:null,X:null,y:Yo,Y:Fo,Z:jo,"%":eu},w={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Ho,e:Ho,f:Xo,H:qo,I:Oo,j:zo,L:$o,m:Bo,M:Vo,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:ru,s:iu,S:Io,u:Zo,U:Wo,V:Qo,w:Jo,W:Go,x:null,X:null,y:Ko,Y:tu,Z:nu,"%":eu},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=g[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=d[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return C(t,n,e,r)},d:fo,e:fo,f:mo,H:po,I:po,j:ho,L:yo,m:co,M:go,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},q:lo,Q:wo,s:xo,S:vo,u:eo,U:ro,V:io,w:no,W:oo,x:function(t,n,r){return C(t,e,n,r)},X:function(t,n,e){return C(t,r,n,e)},y:ao,Y:uo,Z:so,"%":_o};function M(t,n){return function(e){var r,i,o,u=[],a=-1,s=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++a<l;)37===t.charCodeAt(a)&&(u.push(t.slice(s,a)),null!=(i=Ii[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),s=a+1);return u.push(t.slice(s,a)),u.join("")}}function b(t,n){return function(e){var r,i,o=$i(1900,void 0,1);if(C(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=zi($i(o.y,0,1))).getUTCDay(),r=i>4||0===i?Li.ceil(r):Li(r),r=ji.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Oi($i(o.y,0,1))).getDay(),r=i>4||0===i?yi.ceil(r):yi(r),r=Ci.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?zi($i(o.y,0,1)).getUTCDay():Oi($i(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,zi(o)):Oi(o)}}function C(t,n,e,r){for(var i,o,u=0,a=n.length,s=e.length;u<a;){if(r>=s)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=x[i in Ii?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=M(e,_),_.X=M(r,_),_.c=M(n,_),w.x=M(e,w),w.X=M(r,w),w.c=M(n,w),{format:function(t){var n=M(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=b(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=M(t+="",w);return n.toString=function(){return t},n},utcParse:function(t){var n=b(t+="",!0);return n.toString=function(){return t},n}}}(t),Bi=Xi.format,Vi=Xi.parse,Xi.utcFormat,Xi.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ou=fi((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),uu=(ou.range,fi((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),au=(uu.range,fi((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})));au.range;function su(){this._=null}function lu(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function cu(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function fu(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function hu(t){for(;t.L;)t=t.L;return t}su.prototype={constructor:su,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=hu(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(cu(this,e),e=(t=e).U),e.C=!1,r.C=!0,fu(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(fu(this,e),e=(t=e).U),e.C=!1,r.C=!0,cu(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?hu(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,cu(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,fu(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,cu(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,fu(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,cu(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,fu(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var pu=su;function gu(t,n,e,r){var i=[null,null],o=ju.push(i)-1;return i.left=t,i.right=n,e&&du(i,t,n,e),r&&du(i,n,t,r),Yu[t.index].halfedges.push(o),Yu[n.index].halfedges.push(o),i}function vu(t,n,e){var r=[n,e];return r.left=t,r}function du(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function yu(t,n,e,r,i){var o,u=t[0],a=t[1],s=u[0],l=u[1],c=0,f=1,h=a[0]-s,p=a[1]-l;if(o=n-s,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>c&&(c=o)}if(o=r-s,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<f&&(f=o)}if(o=e-l,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>c&&(c=o)}if(o=i-l,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<f&&(f=o)}return!(c>0||f<1)||(c>0&&(t[0]=[s+c*h,l+c*p]),f<1&&(t[1]=[s+f*h,l+f*p]),!0)}}}}}function mu(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,s=t[0],l=t.left,c=t.right,f=l[0],h=l[1],p=c[0],g=c[1],v=(f+p)/2,d=(h+g)/2;if(g===h){if(v<n||v>=r)return;if(f>p){if(s){if(s[1]>=i)return}else s=[v,e];o=[v,i]}else{if(s){if(s[1]<e)return}else s=[v,i];o=[v,e]}}else if(a=d-(u=(f-p)/(g-h))*v,u<-1||u>1)if(f>p){if(s){if(s[1]>=i)return}else s=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(s){if(s[1]<e)return}else s=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<g){if(s){if(s[0]>=r)return}else s=[n,u*n+a];o=[r,u*r+a]}else{if(s){if(s[0]<n)return}else s=[r,u*r+a];o=[n,u*n+a]}return t[0]=s,t[1]=o,!0}function _u(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function wu(t,n){return n[+(n.left!==t.site)]}function xu(t,n){return n[+(n.left===t.site)]}var Mu,bu=[];function Cu(){lu(this),this.x=this.y=this.arc=this.site=this.cy=null}function Nu(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],s=r[0]-u,l=r[1]-a,c=o[0]-u,f=o[1]-a,h=2*(s*f-l*c);if(!(h>=-qu)){var p=s*s+l*l,g=c*c+f*f,v=(f*p-l*g)/h,d=(s*g-c*p)/h,y=bu.pop()||new Cu;y.arc=t,y.site=i,y.x=v+u,y.y=(y.cy=d+a)+Math.sqrt(v*v+d*d),t.circle=y;for(var m=null,_=Fu._;_;)if(y.y<_.y||y.y===_.y&&y.x<=_.x){if(!_.L){m=_.P;break}_=_.L}else{if(!_.R){m=_;break}_=_.R}Fu.insert(m,y),m||(Mu=y)}}}}function Tu(t){var n=t.circle;n&&(n.P||(Mu=n.N),Fu.remove(n),bu.push(n),lu(n),t.circle=null)}var Au=[];function ku(){lu(this),this.edge=this.site=this.circle=null}function Uu(t){var n=Au.pop()||new ku;return n.site=t,n}function Du(t){Tu(t),Pu.remove(t),Au.push(t),lu(t)}function Lu(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];Du(t);for(var s=o;s.circle&&Math.abs(e-s.circle.x)<Hu&&Math.abs(r-s.circle.cy)<Hu;)o=s.P,a.unshift(s),Du(s),s=o;a.unshift(s),Tu(s);for(var l=u;l.circle&&Math.abs(e-l.circle.x)<Hu&&Math.abs(r-l.circle.cy)<Hu;)u=l.N,a.push(l),Du(l),l=u;a.push(l),Tu(l);var c,f=a.length;for(c=1;c<f;++c)l=a[c],s=a[c-1],du(l.edge,s.site,l.site,i);s=a[0],(l=a[f-1]).edge=gu(s.site,l.site,null,i),Nu(s),Nu(l)}function Su(t){for(var n,e,r,i,o=t[0],u=t[1],a=Pu._;a;)if((r=Ru(a,u)-o)>Hu)a=a.L;else{if(!((i=o-Eu(a,u))>Hu)){r>-Hu?(n=a.P,e=a):i>-Hu?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){Yu[t.index]={site:t,halfedges:[]}}(t);var s=Uu(t);if(Pu.insert(n,s),n||e){if(n===e)return Tu(n),e=Uu(n.site),Pu.insert(s,e),s.edge=e.edge=gu(n.site,s.site),Nu(n),void Nu(e);if(e){Tu(n),Tu(e);var l=n.site,c=l[0],f=l[1],h=t[0]-c,p=t[1]-f,g=e.site,v=g[0]-c,d=g[1]-f,y=2*(h*d-p*v),m=h*h+p*p,_=v*v+d*d,w=[(d*m-p*_)/y+c,(h*_-v*m)/y+f];du(e.edge,l,g,w),s.edge=gu(l,t,null,w),e.edge=gu(t,g,null,w),Nu(n),Nu(e)}else s.edge=gu(n.site,s.site)}}function Ru(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],s=e[1],l=s-n;if(!l)return a;var c=a-r,f=1/o-1/l,h=c/l;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*l)-s+l/2+i-o/2)))/f+r:(r+a)/2}function Eu(t,n){var e=t.N;if(e)return Ru(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Pu,Yu,Fu,ju,Hu=1e-6,qu=1e-12;function Ou(t,n){return n[1]-t[1]||n[0]-t[0]}function zu(t,n){var e,r,i,o=t.sort(Ou).pop();for(ju=[],Yu=new Array(t.length),Pu=new pu,Fu=new pu;;)if(i=Mu,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(Su(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;Lu(i.arc)}if(function(){for(var t,n,e,r,i=0,o=Yu.length;i<o;++i)if((t=Yu[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=_u(t,ju[n[e]]);for(u.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],s=+n[1][0],l=+n[1][1];!function(t,n,e,r){for(var i,o=ju.length;o--;)mu(i=ju[o],t,n,e,r)&&yu(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Hu||Math.abs(i[0][1]-i[1][1])>Hu)||delete ju[o]}(u,a,s,l),function(t,n,e,r){var i,o,u,a,s,l,c,f,h,p,g,v,d=Yu.length,y=!0;for(i=0;i<d;++i)if(o=Yu[i]){for(u=o.site,a=(s=o.halfedges).length;a--;)ju[s[a]]||s.splice(a,1);for(a=0,l=s.length;a<l;)g=(p=xu(o,ju[s[a]]))[0],v=p[1],f=(c=wu(o,ju[s[++a%l]]))[0],h=c[1],(Math.abs(g-f)>Hu||Math.abs(v-h)>Hu)&&(s.splice(a,0,ju.push(vu(u,p,Math.abs(g-t)<Hu&&r-v>Hu?[t,Math.abs(f-t)<Hu?h:r]:Math.abs(v-r)<Hu&&e-g>Hu?[Math.abs(h-r)<Hu?f:e,r]:Math.abs(g-e)<Hu&&v-n>Hu?[e,Math.abs(f-e)<Hu?h:n]:Math.abs(v-n)<Hu&&g-t>Hu?[Math.abs(h-n)<Hu?f:t,n]:null))-1),++l);l&&(y=!1)}if(y){var m,_,w,x=1/0;for(i=0,y=null;i<d;++i)(o=Yu[i])&&(w=(m=(u=o.site)[0]-t)*m+(_=u[1]-n)*_)<x&&(x=w,y=o);if(y){var M=[t,n],b=[t,r],C=[e,r],N=[e,n];y.halfedges.push(ju.push(vu(u=y.site,M,b))-1,ju.push(vu(u,b,C))-1,ju.push(vu(u,C,N))-1,ju.push(vu(u,N,M))-1)}}for(i=0;i<d;++i)(o=Yu[i])&&(o.halfedges.length||delete Yu[i])}(u,a,s,l)}this.edges=ju,this.cells=Yu,Pu=Fu=ju=Yu=null}zu.prototype={constructor:zu,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return wu(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a,s,l,c=e.site,f=-1,h=n[i[o-1]],p=h.left===c?h.right:h.left;++f<o;)u=p,p=(h=n[i[f]]).left===c?h.right:h.left,u&&p&&r<u.index&&r<p.index&&(s=u,l=p,((a=c)[0]-l[0])*(s[1]-a[1])-(a[0]-s[0])*(l[1]-a[1])<0)&&t.push([c.data,u.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var s=t-i.site[0],l=n-i.site[1],c=s*s+l*l;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var s=t-a[0],l=n-a[1],f=s*s+l*l;f<c&&(c=f,u=a.index)}}))}while(null!==u);return o._found=r,null==e||c<=e*e?i.site:null}};Math.SQRT2;function $u(t,n,e){this.k=t,this.x=n,this.y=e}$u.prototype={constructor:$u,scale:function(t){return 1===t?this:new $u(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new $u(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new $u(1,0,0);$u.prototype;var Xu=Vi("%d/%m/%Y");function Bu(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Vu=Bi("%B %d, %Y"),Iu=function(){function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t);var e=Rt(n),r=e.node().getBoundingClientRect();this._prepareContainer(e,r),this._setupScales(r);var i=Math.floor(r.height/2);this.size={height:i,wigth:r.width,imgDim:Math.min(150,Math.floor(i/3))}}var n,e,r;return n=t,(e=[{key:"drawMonarchBirthdays",value:function(t){var n=this,e=s(t,(function(t){return t.celebrations}));this.scales.celebrations.domain(e),t.sort((function(t,n){return n.celebrations-t.celebrations}));var r=this.container.selectAll("g.monarch").data(t).enter().append("g").attr("class","monarch").attr("transform",(function(t){return"translate(".concat(n.scales.dayOfYear(t.birthday),", 0)")}));r.append("circle").attr("class",(function(t){return t.title})).attr("r",(function(t){return n.scales.celebrations(t.celebrations)})),r.append("line").attr("class","tooltip").attr("y1",(function(t){return(t.label+1)*n.size.imgDim-n.size.height})),r.append("svg:image").attr("xlink:href",(function(t){return"/assets/images/".concat(t.name.replace(" ","_"),"_sq.png")})).attr("width",this.size.imgDim).attr("height",this.size.imgDim).attr("x",-this.size.imgDim/2).attr("y",(function(t){return t.label*n.size.imgDim-n.size.height})),r.append("text").text((function(t){return t.name})).attr("class","name").attr("y",(function(t){return(t.label+1)*n.size.imgDim-n.size.height})).attr("dy","1em"),r.append("text").text((function(t){return Vu(t.born)})).attr("class","note").attr("y",(function(t){return(t.label+1)*n.size.imgDim-n.size.height})).attr("dy","2.5em")}},{key:"drawCelebrationDates",value:function(t){console.log("drawCelebrationDates")}},{key:"markAvgMonarchBithday",value:function(t){var n=t.reduce((function(t,n){return t+n.birthday*n.celebrations}),0),e=t.reduce((function(t,n){return t+n.celebrations}),0);Math.round(n/e)}},{key:"_setupScales",value:function(t){var n=Math.floor(t.width/20),e=function t(){var n=Or(Er,Er);return n.copy=function(){return Hr(n,t())},Ar.apply(n,arguments),ri(n)}().domain([0,365]).range([0,t.width]),r=function(){return si.apply(null,arguments).exponent(.5)}().range([3,n]);this.scales={dayOfYear:e,celebrations:r}}},{key:"_prepareContainer",value:function(t,n){var e=Math.floor(n.height/2);this.container=Rt(".container").append("svg").attr("width",n.width).attr("height",n.height).append("g").attr("transform","translate(0, ".concat(e,")")),this.container.append("line").attr("class","axis").attr("x2",n.width)}}])&&Bu(n.prototype,e),r&&Bu(n,r),t}(),Zu=[];gr("/assets/data/british_monarchs.csv").then((function(t){return function(t){return console.log(t),t&&t.length?t.map((function(t){var n,e,r,i,o=Xu(t.Born);return console.log(t.Name),{name:t.Name,reign_from:Xu(t.From),reign_till:Xu(t.Till),born:o,birthday:(n=o,e=new Date(n.getFullYear(),0,0),r=1e3*(e.getTimezoneOffset()-n.getTimezoneOffset())*60,i=n-e+r,Math.floor(i/864e5)),celebrations:+t.Celebrates,title:t.Title,label:+t.Label}})):[]}(t)})).then((function(t){var n=new Iu(".container");n.drawMonarchBirthdays(t),n.drawCelebrationDates(Zu),n.markAvgMonarchBithday(t)}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,